xlab("Predicted gpu_avg") +
ylab("Actual gpu_avg") +
geom_abline(intercept = 0, slope = 1, color = "red")
# Fit a linear regression model to predict gpu_avg using bond, spy, nvda, difficulty, and btc
glm_model <- glm(gpu_avg ~ bond + spy + nvda + difficulty + btc, data = GPU_input_data_overall)
# Use the model to predict gpu_avg for all three datasets
predicted_overall <- predict(glm_model, newdata = GPU_input_data_overall)
predicted_pre <- predict(glm_model, newdata = GPU_input_data_pre)
predicted_post <- predict(glm_model, newdata = GPU_input_data_post)
# Combine the predicted and actual gpu_avg values into a data frame for each dataset
df_overall <- data.frame(actual = GPU_input_data_overall$gpu_avg, predicted = predicted_overall)
df_pre <- data.frame(actual = GPU_input_data_pre$gpu_avg, predicted = predicted_pre)
df_post <- data.frame(actual = GPU_input_data_post$gpu_avg, predicted = predicted_post)
# Create a scatterplot of the predicted vs actual gpu_avg values for each dataset
ggplot(df_overall, aes(x = predicted, y = actual)) +
geom_point(color = "blue") +
ggtitle("GPU Input Data Overall") +
xlab("Predicted gpu_avg") +
ylab("Actual gpu_avg") +
geom_abline(intercept = 0, slope = 1, color = "red")
# Fit a linear regression model to predict gpu_avg using bond, spy, nvda, difficulty, and btc for each dataset
glm_model_overall <- glm(gpu_avg ~ bond + spy + nvda + difficulty + btc, data = GPU_input_data_overall)
glm_model_pre <- glm(gpu_avg ~ bond + spy + nvda + difficulty + btc, data = GPU_input_data_pre)
glm_model_post <- glm(gpu_avg ~ bond + spy + nvda + difficulty + btc, data = GPU_input_data_post)
# Use the models to predict gpu_avg for all three datasets
predicted_overall <- predict(glm_model_overall, newdata = GPU_input_data_overall)
predicted_pre <- predict(glm_model_pre, newdata = GPU_input_data_pre)
predicted_post <- predict(glm_model_post, newdata = GPU_input_data_post)
# Create a data frame with the actual and predicted values for each dataset
results <- data.frame(
dataset = c(rep("Overall", nrow(GPU_input_data_overall)), rep("Pre", nrow(GPU_input_data_pre)), rep("Post", nrow(GPU_input_data_post))),
actual = c(GPU_input_data_overall$gpu_avg, GPU_input_data_pre$gpu_avg, GPU_input_data_post$gpu_avg),
predicted = c(predicted_overall, predicted_pre, predicted_post)
)
# Plot the results using ggplot2
ggplot(results, aes(x = actual, y = predicted, color = dataset)) +
geom_abline(intercept = 0, slope = 1, linetype = "dashed") +
geom_point() +
labs(x = "Actual GPU Average Price", y = "Predicted GPU Average Price", title = "Linear Regression Model Predictions for GPU Average Price") +
theme_bw()
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
# Load in the GPU_input_data_overall.csv file
GPU_input_data_overall <- read.csv("GPU_input_data_overall.csv")
# Load in the GPU_input_data_pre.csv file
GPU_input_data_pre <- read.csv("GPU_input_data_pre.csv")
# Load in the GPU_input_data_post.csv file
GPU_input_data_post <- read.csv("GPU_input_data_post.csv")
# Scale the difficulty and btc variables down by 1000
GPU_input_data_overall$difficulty <- GPU_input_data_overall$difficulty / 1000
GPU_input_data_overall$btc <- GPU_input_data_overall$btc / 1000
GPU_input_data_pre$difficulty <- GPU_input_data_pre$difficulty / 1000
GPU_input_data_pre$btc <- GPU_input_data_pre$btc / 1000
GPU_input_data_post$difficulty <- GPU_input_data_post$difficulty / 1000
GPU_input_data_post$btc <- GPU_input_data_post$btc / 1000
#create a variable that is the average of the three prices
# For GPU_input_data_overall
GPU_input_data_overall$gpu_avg <- rowMeans(GPU_input_data_overall[, c("gtx1080ti", "gtx1660ti", "rtx3070")])
# For GPU_input_data_pre
GPU_input_data_pre$gpu_avg <- rowMeans(GPU_input_data_pre[, c("gtx1080ti", "gtx1660ti", "rtx3070")])
# For GPU_input_data_post
GPU_input_data_post$gpu_avg <- rowMeans(GPU_input_data_post[, c("gtx1080ti", "gtx1660ti", "rtx3070")])
# Fit a linear regression model to predict gpu_avg using bond, spy, nvda, difficulty, and btc for each dataset
glm_model_overall <- glm(gpu_avg ~ bond + spy + nvda + difficulty + btc, data = GPU_input_data_overall)
glm_model_pre <- glm(gpu_avg ~ bond + spy + nvda + difficulty + btc, data = GPU_input_data_pre)
glm_model_post <- glm(gpu_avg ~ bond + spy + nvda + difficulty + btc, data = GPU_input_data_post)
# Use the models to predict gpu_avg for all three datasets
predicted_overall <- predict(glm_model_overall, newdata = GPU_input_data_overall)
predicted_pre <- predict(glm_model_pre, newdata = GPU_input_data_pre)
predicted_post <- predict(glm_model_post, newdata = GPU_input_data_post)
# Create a data frame with the actual and predicted values for each dataset
results <- data.frame(
dataset = c(rep("Overall", nrow(GPU_input_data_overall)), rep("Pre", nrow(GPU_input_data_pre)), rep("Post", nrow(GPU_input_data_post))),
actual = c(GPU_input_data_overall$gpu_avg, GPU_input_data_pre$gpu_avg, GPU_input_data_post$gpu_avg),
predicted = c(predicted_overall, predicted_pre, predicted_post)
)
# Plot the results using ggplot2
ggplot(results, aes(x = actual, y = predicted, color = dataset)) +
geom_abline(intercept = 0, slope = 1, linetype = "dashed") +
geom_point() +
labs(x = "Actual GPU Average Price", y = "Predicted GPU Average Price", title = "Linear Regression Model Predictions for GPU Average Price") +
theme_bw()
# Summarize the results for each dataset using the summary() function
cat("Summary for Overall Dataset:\n")
summary(glm_model_overall)
cat("\n")
cat("Summary for Pre Dataset:\n")
summary(glm_model_pre)
cat("\n")
cat("Summary for Post Dataset:\n")
summary(glm_model_post)
# Fit a linear regression model to predict gpu_avg using bond, spy, nvda, difficulty, and btc for each dataset
glm_overall <- glm(gpu_avg ~ bond + spy + nvda + difficulty + btc, data = GPU_input_data_overall)
glm_pre <- glm(gpu_avg ~ bond + spy + nvda + difficulty + btc, data = GPU_input_data_pre)
glm_post <- glm(gpu_avg ~ bond + spy + nvda + difficulty + btc, data = GPU_input_data_post)
# Use each model to predict gpu_avg for all three datasets
predicted_overall <- predict(glm_overall, newdata = list(bond = GPU_input_data_overall$bond, spy = GPU_input_data_overall$spy, nvda = GPU_input_data_overall$nvda, difficulty = GPU_input_data_overall$difficulty, btc = GPU_input_data_overall$btc))
predicted_pre <- predict(glm_pre, newdata = list(bond = GPU_input_data_pre$bond, spy = GPU_input_data_pre$spy, nvda = GPU_input_data_pre$nvda, difficulty = GPU_input_data_pre$difficulty, btc = GPU_input_data_pre$btc))
predicted_post <- predict(glm_post, newdata = list(bond = GPU_input_data_post$bond, spy = GPU_input_data_post$spy, nvda = GPU_input_data_post$nvda, difficulty = GPU_input_data_post$difficulty, btc = GPU_input_data_post$btc))
# Create a dataframe to store the results
results_df <- data.frame(
dataset = c(rep("overall", nrow(GPU_input_data_overall)), rep("pre", nrow(GPU_input_data_pre)), rep("post", nrow(GPU_input_data_post))),
actual = c(GPU_input_data_overall$gpu_avg, GPU_input_data_pre$gpu_avg, GPU_input_data_post$gpu_avg),
predicted = c(predicted_overall, predicted_pre, predicted_post)
)
# Plot the actual vs. predicted values for each dataset
ggplot(results_df, aes(x = actual, y = predicted, color = dataset)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, linetype = "dashed") +
labs(x = "Actual GPU Average Price
# Fit a linear regression model to predict gpu_avg using bond, spy, nvda, difficulty, and btc for each dataset
glm_overall <- glm(gpu_avg ~ bond + spy + nvda + difficulty + btc, data = GPU_input_data_overall)
glm_pre <- glm(gpu_avg ~ bond + spy + nvda + difficulty + btc, data = GPU_input_data_pre)
glm_post <- glm(gpu_avg ~ bond + spy + nvda + difficulty + btc, data = GPU_input_data_post)
# Use each model to predict gpu_avg for all three datasets
predicted_overall <- predict(glm_overall, newdata = list(bond = GPU_input_data_overall$bond, spy = GPU_input_data_overall$spy, nvda = GPU_input_data_overall$nvda, difficulty = GPU_input_data_overall$difficulty, btc = GPU_input_data_overall$btc))
predicted_pre <- predict(glm_pre, newdata = list(bond = GPU_input_data_pre$bond, spy = GPU_input_data_pre$spy, nvda = GPU_input_data_pre$nvda, difficulty = GPU_input_data_pre$difficulty, btc = GPU_input_data_pre$btc))
predicted_post <- predict(glm_post, newdata = list(bond = GPU_input_data_post$bond, spy = GPU_input_data_post$spy, nvda = GPU_input_data_post$nvda, difficulty = GPU_input_data_post$difficulty, btc = GPU_input_data_post$btc))
# Create a dataframe to store the results
results_df <- data.frame(
dataset = c(rep("overall", nrow(GPU_input_data_overall)), rep("pre", nrow(GPU_input_data_pre)), rep("post", nrow(GPU_input_data_post))),
actual = c(GPU_input_data_overall$gpu_avg, GPU_input_data_pre$gpu_avg, GPU_input_data_post$gpu_avg),
predicted = c(predicted_overall, predicted_pre, predicted_post)
)
# Plot the actual vs. predicted values for each dataset
ggplot(results_df, aes(x = actual, y = predicted, color = dataset)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, linetype = "dashed") +
labs(x = "Actual GPU Average Price", y = "Predicted GPU Average Price", color = "Dataset") +
ggtitle("Comparison of Linear Regression Models Trained on Different Time Periods") +
theme(plot.title = element_text(hjust = 0.5))
# Print the summary of each model
cat("\nSummary of Model Trained on GPU_input_data_overall:\n")
summary(glm_overall)
cat("\nSummary of Model Trained on GPU_input_data_pre:\n")
summary(glm_pre)
cat("\nSummary of Model Trained on GPU_input_data_post:\n")
summary(glm_post)
# Fit a linear regression model to predict gpu_avg using bond, spy, nvda, difficulty, and btc for each dataset
glm_overall <- glm(gpu_avg ~ bond + spy + nvda + difficulty + btc, data = GPU_input_data_overall)
glm_pre <- glm(gpu_avg ~ bond + spy + nvda + difficulty + btc, data = GPU_input_data_pre)
glm_post <- glm(gpu_avg ~ bond + spy + nvda + difficulty + btc, data = GPU_input_data_post)
# Use each model to predict gpu_avg for all three datasets
predicted_overall <- predict(glm_overall, newdata = list(bond = GPU_input_data_overall$bond, spy = GPU_input_data_overall$spy, nvda = GPU_input_data_overall$nvda, difficulty = GPU_input_data_overall$difficulty, btc = GPU_input_data_overall$btc))
predicted_pre <- predict(glm_pre, newdata = list(bond = GPU_input_data_pre$bond, spy = GPU_input_data_pre$spy, nvda = GPU_input_data_pre$nvda, difficulty = GPU_input_data_pre$difficulty, btc = GPU_input_data_pre$btc))
predicted_post <- predict(glm_post, newdata = list(bond = GPU_input_data_post$bond, spy = GPU_input_data_post$spy, nvda = GPU_input_data_post$nvda, difficulty = GPU_input_data_post$difficulty, btc = GPU_input_data_post$btc))
# Create data frames to store the results
results_overall <- data.frame(actual = GPU_input_data_overall$gpu_avg, predicted = predicted_overall, dataset = "overall")
results_pre <- data.frame(actual = GPU_input_data_pre$gpu_avg, predicted = predicted_pre, dataset = "pre")
results_post <- data.frame(actual = GPU_input_data_post$gpu_avg, predicted = predicted_post, dataset = "post")
# Combine the results into a single data frame
results_df <- rbind(results_overall, results_pre, results_post)
# Plot the actual vs. predicted values for each model-dataset combination
ggplot(results_df, aes(x = actual, y = predicted, color = dataset)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, linetype = "dashed") +
facet_wrap(~ dataset, scales = "free") +
labs(x = "Actual GPU Average Price", y = "Predicted GPU Average Price", color = "Dataset") +
ggtitle("Comparison of Linear Regression Models Trained on
# Fit a linear regression model to predict gpu_avg using bond, spy, nvda, difficulty, and btc for each dataset
glm_overall <- glm(gpu_avg ~ bond + spy + nvda + difficulty + btc, data = GPU_input_data_overall)
glm_pre <- glm(gpu_avg ~ bond + spy + nvda + difficulty + btc, data = GPU_input_data_pre)
glm_post <- glm(gpu_avg ~ bond + spy + nvda + difficulty + btc, data = GPU_input_data_post)
# Use each model to predict gpu_avg for all three datasets
predicted_overall <- predict(glm_overall, newdata = list(bond = GPU_input_data_overall$bond, spy = GPU_input_data_overall$spy, nvda = GPU_input_data_overall$nvda, difficulty = GPU_input_data_overall$difficulty, btc = GPU_input_data_overall$btc))
predicted_pre <- predict(glm_pre, newdata = list(bond = GPU_input_data_pre$bond, spy = GPU_input_data_pre$spy, nvda = GPU_input_data_pre$nvda, difficulty = GPU_input_data_pre$difficulty, btc = GPU_input_data_pre$btc))
predicted_post <- predict(glm_post, newdata = list(bond = GPU_input_data_post$bond, spy = GPU_input_data_post$spy, nvda = GPU_input_data_post$nvda, difficulty = GPU_input_data_post$difficulty, btc = GPU_input_data_post$btc))
# Create data frames to store the results
results_overall <- data.frame(actual = GPU_input_data_overall$gpu_avg, predicted = predicted_overall, dataset = "overall")
results_pre <- data.frame(actual = GPU_input_data_pre$gpu_avg, predicted = predicted_pre, dataset = "pre")
results_post <- data.frame(actual = GPU_input_data_post$gpu_avg, predicted = predicted_post, dataset = "post")
# Combine the results into a single data frame
results_df <- rbind(results_overall, results_pre, results_post)
# Plot the actual vs. predicted values for each model-dataset combination
ggplot(results_df, aes(x = actual, y = predicted, color = dataset)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, linetype = "dashed") +
facet_grid(. ~ dataset) +
labs(x = "Actual GPU Average Price", y = "Predicted GPU Average Price", color = "Dataset") +
ggtitle("Comparison of Linear Regression Models Trained on Different Time Periods") +
theme(plot.title = element_text(hjust = 0.5))
# Print the summary of each model
cat("\nSummary of Model Trained on GPU_input_data_overall:\n")
summary(glm_overall)
cat("\nSummary of Model Trained on GPU_input_data_pre:\n")
summary(glm_pre)
cat("\nSummary of Model Trained on GPU_input_data_post:\n")
summary(glm_post)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
# Load in the GPU_input_data_overall.csv file
GPU_input_data_overall <- read.csv("GPU_input_data_overall.csv")
# Load in the GPU_input_data_pre.csv file
GPU_input_data_pre <- read.csv("GPU_input_data_pre.csv")
# Load in the GPU_input_data_post.csv file
GPU_input_data_post <- read.csv("GPU_input_data_post.csv")
# Scale the difficulty and btc variables down by 1000
GPU_input_data_overall$difficulty <- GPU_input_data_overall$difficulty / 1000
GPU_input_data_overall$btc <- GPU_input_data_overall$btc / 1000
GPU_input_data_pre$difficulty <- GPU_input_data_pre$difficulty / 1000
GPU_input_data_pre$btc <- GPU_input_data_pre$btc / 1000
GPU_input_data_post$difficulty <- GPU_input_data_post$difficulty / 1000
GPU_input_data_post$btc <- GPU_input_data_post$btc / 1000
#create a variable that is the average of the three prices
# For GPU_input_data_overall
GPU_input_data_overall$gpu_avg <- rowMeans(GPU_input_data_overall[, c("gtx1080ti", "gtx1660ti", "rtx3070")])
# For GPU_input_data_pre
GPU_input_data_pre$gpu_avg <- rowMeans(GPU_input_data_pre[, c("gtx1080ti", "gtx1660ti", "rtx3070")])
# For GPU_input_data_post
GPU_input_data_post$gpu_avg <- rowMeans(GPU_input_data_post[, c("gtx1080ti", "gtx1660ti", "rtx3070")])
# Fit linear regression models to predict gpu_avg using bond, spy, nvda, difficulty, and btc for each dataset
glm_overall <- glm(gpu_avg ~ bond + spy + nvda + difficulty + btc, data = GPU_input_data_overall)
glm_pre <- glm(gpu_avg ~ bond + spy + nvda + difficulty + btc, data = GPU_input_data_pre)
glm_post <- glm(gpu_avg ~ bond + spy + nvda + difficulty + btc, data = GPU_input_data_post)
# Use each model to predict gpu_avg for all three datasets
predicted_overall_overall <- predict(glm_overall, newdata = list(bond = GPU_input_data_overall$bond, spy = GPU_input_data_overall$spy, nvda = GPU_input_data_overall$nvda, difficulty = GPU_input_data_overall$difficulty, btc = GPU_input_data_overall$btc))
predicted_pre_overall <- predict(glm_overall, newdata = list(bond = GPU_input_data_pre$bond, spy = GPU_input_data_pre$spy, nvda = GPU_input_data_pre$nvda, difficulty = GPU_input_data_pre$difficulty, btc = GPU_input_data_pre$btc))
predicted_post_overall <- predict(glm_overall, newdata = list(bond = GPU_input_data_post$bond, spy = GPU_input_data_post$spy, nvda = GPU_input_data_post$nvda, difficulty = GPU_input_data_post$difficulty, btc = GPU_input_data_post$btc))
predicted_overall_pre <- predict(glm_pre, newdata = list(bond = GPU_input_data_overall$bond, spy = GPU_input_data_overall$spy, nvda = GPU_input_data_overall$nvda, difficulty = GPU_input_data_overall$difficulty, btc = GPU_input_data_overall$btc))
predicted_pre_pre <- predict(glm_pre, newdata = list(bond = GPU_input_data_pre$bond, spy = GPU_input_data_pre$spy, nvda = GPU_input_data_pre$nvda, difficulty = GPU_input_data_pre$difficulty, btc = GPU_input_data_pre$btc))
predicted_post_pre <- predict(glm_pre, newdata = list(bond = GPU_input_data_post$bond, spy = GPU_input_data_post$spy, nvda = GPU_input_data_post$nvda, difficulty = GPU_input_data_post$difficulty, btc = GPU_input_data_post$btc))
predicted_overall_post <- predict(glm_post, newdata = list(bond = GPU_input_data_overall$bond, spy = GPU_input_data_overall$spy, nvda = GPU_input_data_overall$nvda, difficulty = GPU_input_data_overall$difficulty, btc = GPU_input_data_overall$btc))
predicted_pre_post <- predict(glm_post, newdata = list(bond = GPU_input_data_pre$bond, spy = GPU_input_data_pre$spy, nvda = GPU_input_data_pre$nvda, difficulty = GPU_input_data_pre$difficulty, btc = GPU_input_data_pre$btc))
predicted_post_post <- predict(glm_post, newdata = list(bond = GPU_input_data_post$bond, spy = GPU_input_data_post$spy, nvda = GPU_input_data_post$nvda, difficulty = GPU_input_data_post$difficulty, btc = GPU_input_data_post$btc))
# Create data frames to store the results
results_overall_overall <- data.frame(actual = GPU_input_data_overall$gpu_avg, predicted = predicted_overall_overall, dataset = "overall")
results_overall_pre <- data.frame(actual = GPU_input_data_pre$gpu_avg, predicted = predicted_overall_pre, dataset = "pre")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
# Load in the GPU_input_data_overall.csv file
GPU_input_data_overall <- read.csv("GPU_input_data_overall.csv")
# Load in the GPU_input_data_pre.csv file
GPU_input_data_pre <- read.csv("GPU_input_data_pre.csv")
# Load in the GPU_input_data_post.csv file
GPU_input_data_post <- read.csv("GPU_input_data_post.csv")
# Scale the difficulty and btc variables down by 1000
GPU_input_data_overall$difficulty <- GPU_input_data_overall$difficulty / 1000
GPU_input_data_overall$btc <- GPU_input_data_overall$btc / 1000
GPU_input_data_pre$difficulty <- GPU_input_data_pre$difficulty / 1000
GPU_input_data_pre$btc <- GPU_input_data_pre$btc / 1000
GPU_input_data_post$difficulty <- GPU_input_data_post$difficulty / 1000
GPU_input_data_post$btc <- GPU_input_data_post$btc / 1000
#create a variable that is the average of the three prices
# For GPU_input_data_overall
GPU_input_data_overall$gpu_avg <- rowMeans(GPU_input_data_overall[, c("gtx1080ti", "gtx1660ti", "rtx3070")])
# For GPU_input_data_pre
GPU_input_data_pre$gpu_avg <- rowMeans(GPU_input_data_pre[, c("gtx1080ti", "gtx1660ti", "rtx3070")])
# For GPU_input_data_post
GPU_input_data_post$gpu_avg <- rowMeans(GPU_input_data_post[, c("gtx1080ti", "gtx1660ti", "rtx3070")])
# Fit linear regression models to predict gpu_avg using bond, spy, nvda, difficulty, and btc for each dataset
glm_overall <- glm(gpu_avg ~ bond + spy + nvda + difficulty + btc, data = GPU_input_data_overall)
glm_pre <- glm(gpu_avg ~ bond + spy + nvda + difficulty + btc, data = GPU_input_data_pre)
glm_post <- glm(gpu_avg ~ bond + spy + nvda + difficulty + btc, data = GPU_input_data_post)
# Use each model to predict gpu_avg for all three datasets
predicted_overall_overall <- predict(glm_overall, newdata = list(bond = GPU_input_data_overall$bond, spy = GPU_input_data_overall$spy, nvda = GPU_input_data_overall$nvda, difficulty = GPU_input_data_overall$difficulty, btc = GPU_input_data_overall$btc))
predicted_pre_overall <- predict(glm_overall, newdata = list(bond = GPU_input_data_pre$bond, spy = GPU_input_data_pre$spy, nvda = GPU_input_data_pre$nvda, difficulty = GPU_input_data_pre$difficulty, btc = GPU_input_data_pre$btc))
predicted_post_overall <- predict(glm_overall, newdata = list(bond = GPU_input_data_post$bond, spy = GPU_input_data_post$spy, nvda = GPU_input_data_post$nvda, difficulty = GPU_input_data_post$difficulty, btc = GPU_input_data_post$btc))
predicted_overall_pre <- predict(glm_pre, newdata = list(bond = GPU_input_data_overall$bond, spy = GPU_input_data_overall$spy, nvda = GPU_input_data_overall$nvda, difficulty = GPU_input_data_overall$difficulty, btc = GPU_input_data_overall$btc))
predicted_pre_pre <- predict(glm_pre, newdata = list(bond = GPU_input_data_pre$bond, spy = GPU_input_data_pre$spy, nvda = GPU_input_data_pre$nvda, difficulty = GPU_input_data_pre$difficulty, btc = GPU_input_data_pre$btc))
predicted_post_pre <- predict(glm_pre, newdata = list(bond = GPU_input_data_post$bond, spy = GPU_input_data_post$spy, nvda = GPU_input_data_post$nvda, difficulty = GPU_input_data_post$difficulty, btc = GPU_input_data_post$btc))
predicted_overall_post <- predict(glm_post, newdata = list(bond = GPU_input_data_overall$bond, spy = GPU_input_data_overall$spy, nvda = GPU_input_data_overall$nvda, difficulty = GPU_input_data_overall$difficulty, btc = GPU_input_data_overall$btc))
predicted_pre_post <- predict(glm_post, newdata = list(bond = GPU_input_data_pre$bond, spy = GPU_input_data_pre$spy, nvda = GPU_input_data_pre$nvda, difficulty = GPU_input_data_pre$difficulty, btc = GPU_input_data_pre$btc))
predicted_post_post <- predict(glm_post, newdata = list(bond = GPU_input_data_post$bond, spy = GPU_input_data_post$spy, nvda = GPU_input_data_post$nvda, difficulty = GPU_input_data_post$difficulty, btc = GPU_input_data_post$btc))
# Create data frames to store the results
results_overall_overall <- data.frame(actual = GPU_input_data_overall$gpu_avg, predicted = predicted_overall_overall, dataset = "overall", model = "overall")
results_overall_pre <- data.frame(actual = GPU_input_data_pre$gpu_avg, predicted = predicted_overall_pre, dataset = "pre", model = "overall")
# Fit linear regression models to predict gpu_avg using bond, spy, nvda, difficulty, and btc for each dataset
glm_overall <- glm(gpu_avg ~ bond + spy + nvda + difficulty + btc, data = GPU_input_data_overall)
glm_pre <- glm(gpu_avg ~ bond + spy + nvda + difficulty + btc, data = GPU_input_data_pre)
glm_post <- glm(gpu_avg ~ bond + spy + nvda + difficulty + btc, data = GPU_input_data_post)
# Use each model to predict gpu_avg for all three datasets
predicted_overall_overall <- predict(glm_overall, newdata = list(bond = GPU_input_data_overall$bond, spy = GPU_input_data_overall$spy, nvda = GPU_input_data_overall$nvda, difficulty = GPU_input_data_overall$difficulty, btc = GPU_input_data_overall$btc))
predicted_pre_overall <- predict(glm_pre, newdata = list(bond = GPU_input_data_overall$bond, spy = GPU_input_data_overall$spy, nvda = GPU_input_data_overall$nvda, difficulty = GPU_input_data_overall$difficulty, btc = GPU_input_data_overall$btc, gpu_avg = rep(NA, nrow(GPU_input_data_overall) ) ))
predicted_overall_pre <- predict(glm_pre, newdata = list(bond = GPU_input_data_pre$bond, spy = GPU_input_data_pre$spy, nvda = GPU_input_data_pre$nvda, difficulty = GPU_input_data_pre$difficulty, btc = GPU_input_data_pre$btc))
predicted_pre_pre <- predict(glm_pre, newdata = list(bond = GPU_input_data_pre$bond, spy = GPU_input_data_pre$spy, nvda = GPU_input_data_pre$nvda, difficulty = GPU_input_data_pre$difficulty, btc = GPU_input_data_pre$btc))
predicted_post_pre <- predict(glm_pre, newdata = list(bond = GPU_input_data_post$bond, spy = GPU_input_data_post$spy, nvda = GPU_input_data_post$nvda, difficulty = GPU_input_data_post$difficulty, btc = GPU_input_data_post$btc, gpu_avg = rep(NA, nrow(GPU_input_data_post) ) ))
predicted_overall_post <- predict(glm_post, newdata = list(bond = GPU_input_data_overall$bond, spy = GPU_input_data_overall$spy, nvda = GPU_input_data_overall$nvda, difficulty = GPU_input_data_overall$difficulty, btc = GPU_input_data_overall$btc, gpu_avg = rep(NA, nrow(GPU_input_data_overall))))
predicted_pre_post <- predict(glm_post, newdata = list(bond = GPU_input_data_pre$bond, spy = GPU_input_data_pre$spy, nvda = GPU_input_data_pre$nvda, difficulty = GPU_input_data_pre$difficulty, btc = GPU_input_data_pre$btc, gpu_avg = rep(NA, nrow(GPU_input_data_pre))))
predicted_post_post <- predict(glm_post, newdata = list(bond = GPU_input_data_post$bond, spy = GPU_input_data_post$spy, nvda = GPU_input_data_post$nvda, difficulty = GPU_input_data_post$difficulty, btc = GPU_input_data_post$btc))
# Combine the actual and predicted values for each model-dataset combination into a data frame
results_overall_overall <- data.frame(actual = GPU_input_data_overall$gpu_avg, predicted = predicted_overall_overall, model = "Overall")
results_pre_overall <- data.frame(actual = GPU_input_data_overall$gpu_avg, predicted = predicted_pre_overall, model = "Pre")
results_post_overall <- data.frame(actual = GPU_input_data_overall$gpu_avg, predicted = predicted_post_overall, model = "Post")
# Fit linear regression models to predict gpu_avg using bond, spy, nvda, difficulty, and btc for each dataset
glm_overall <- glm(gpu_avg ~ bond + spy + nvda + difficulty + btc, data = GPU_input_data_overall)
glm_pre <- glm(gpu_avg ~ bond + spy + nvda + difficulty + btc, data = GPU_input_data_pre)
glm_post <- glm(gpu_avg ~ bond + spy + nvda + difficulty + btc, data = GPU_input_data_post)
# Use each model to predict gpu_avg for all three datasets
predicted_overall_overall <- predict(glm_overall, newdata = GPU_input_data_overall)
predicted_overall_pre <- predict(glm_overall, newdata = GPU_input_data_pre)
predicted_overall_post <- predict(glm_overall, newdata = GPU_input_data_post)
predicted_pre_overall <- predict(glm_pre, newdata = GPU_input_data_overall)
predicted_pre_pre <- predict(glm_pre, newdata = GPU_input_data_pre)
predicted_pre_post <- predict(glm_pre, newdata = GPU_input_data_post)
predicted_post_overall <- predict(glm_post, newdata = GPU_input_data_overall)
predicted_post_pre <- predict(glm_post, newdata = GPU_input_data_pre)
predicted_post_post <- predict(glm_post, newdata = GPU_input_data_post)
# Create data frames to store the results
results_overall_overall <- data.frame(actual = GPU_input_data_overall$gpu_avg, predicted = predicted_overall_overall, dataset = "overall", model = "overall")
results_overall_pre <- data.frame(actual = GPU_input_data_pre$gpu_avg, predicted = predicted_overall_pre, dataset = "pre", model = "overall")
results_overall_post <- data.frame(actual = GPU_input_data_post$gpu_avg, predicted = predicted_overall_post, dataset = "post", model = "overall")
results_pre_overall <- data.frame(actual = GPU_input_data_overall$gpu_avg, predicted = predicted_pre_overall, dataset = "overall", model = "pre")
results_pre_pre <- data.frame(actual = GPU_input_data_pre$gpu_avg, predicted = predicted_pre_pre, dataset = "pre", model = "pre")
results_pre_post <- data.frame(actual = GPU_input_data_post$gpu_avg, predicted = predicted_pre_post, dataset = "post", model = "pre")
results_post_overall <- data.frame(actual = GPU_input_data_overall$gpu_avg, predicted = predicted_post_overall, dataset = "overall", model = post")
results_post_pre <- data.frame(actual = GPU_input_data_pre$gpu_avg, predicted = predicted_post_pre, dataset = "pre", model = "post")
# Fit linear regression models to predict gpu_avg using bond, spy, nvda, difficulty, and btc for each dataset
glm_overall <- glm(gpu_avg ~ bond + spy + nvda + difficulty + btc, data = GPU_input_data_overall)
glm_pre <- glm(gpu_avg ~ bond + spy + nvda + difficulty + btc, data = GPU_input_data_pre)
glm_post <- glm(gpu_avg ~ bond + spy + nvda + difficulty + btc, data = GPU_input_data_post)
# Use each model to predict gpu_avg for all three datasets
predicted_overall_overall <- predict(glm_overall, newdata = GPU_input_data_overall)
predicted_overall_pre <- predict(glm_overall, newdata = GPU_input_data_pre)
predicted_overall_post <- predict(glm_overall, newdata = GPU_input_data_post)
predicted_pre_overall <- predict(glm_pre, newdata = GPU_input_data_overall)
predicted_pre_pre <- predict(glm_pre, newdata = GPU_input_data_pre)
predicted_pre_post <- predict(glm_pre, newdata = GPU_input_data_post)
predicted_post_overall <- predict(glm_post, newdata = GPU_input_data_overall)
predicted_post_pre <- predict(glm_post, newdata = GPU_input_data_pre)
predicted_post_post <- predict(glm_post, newdata = GPU_input_data_post)
# Create data frames to store the results
results_overall_overall <- data.frame(actual = GPU_input_data_overall$gpu_avg, predicted = predicted_overall_overall, dataset = "overall", model = "overall")
results_overall_pre <- data.frame(actual = GPU_input_data_pre$gpu_avg, predicted = predicted_overall_pre, dataset = "pre", model = "overall")
results_overall_post <- data.frame(actual = GPU_input_data_post$gpu_avg, predicted = predicted_overall_post, dataset = "post", model = "overall")
results_pre_overall <- data.frame(actual = GPU_input_data_overall$gpu_avg, predicted = predicted_pre_overall, dataset = "overall", model = "pre")
results_pre_pre <- data.frame(actual = GPU_input_data_pre$gpu_avg, predicted = predicted_pre_pre, dataset = "pre", model = "pre")
results_pre_post <- data.frame(actual = GPU_input_data_post$gpu_avg, predicted = predicted_pre_post, dataset = "post", model = "pre")
results_post_overall <- data.frame(actual = GPU_input_data_overall$gpu_avg, predicted = predicted_post_overall, dataset = "overall", model = post)
# Fit linear regression models to predict gpu_avg using bond, spy, nvda, difficulty, and btc for each dataset
glm_overall <- glm(gpu_avg ~ bond + spy + nvda + difficulty + btc, data = GPU_input_data_overall)
glm_pre <- glm(gpu_avg ~ bond + spy + nvda + difficulty + btc, data = GPU_input_data_pre)
glm_post <- glm(gpu_avg ~ bond + spy + nvda + difficulty + btc, data = GPU_input_data_post)
# Use each model to predict gpu_avg for all three datasets
predicted_overall_overall <- predict(glm_overall, newdata = GPU_input_data_overall)
predicted_overall_pre <- predict(glm_overall, newdata = GPU_input_data_pre)
predicted_overall_post <- predict(glm_overall, newdata = GPU_input_data_post)
predicted_pre_overall <- predict(glm_pre, newdata = GPU_input_data_overall)
predicted_pre_pre <- predict(glm_pre, newdata = GPU_input_data_pre)
predicted_pre_post <- predict(glm_pre, newdata = GPU_input_data_post)
predicted_post_overall <- predict(glm_post, newdata = GPU_input_data_overall)
predicted_post_pre <- predict(glm_post, newdata = GPU_input_data_pre)
predicted_post_post <- predict(glm_post, newdata = GPU_input_data_post)
# Create data frames to store the results
results_overall_overall <- data.frame(actual = GPU_input_data_overall$gpu_avg, predicted = predicted_overall_overall, dataset = "overall", model = "overall")
results_overall_pre <- data.frame(actual = GPU_input_data_pre$gpu_avg, predicted = predicted_overall_pre, dataset = "pre", model = "overall")
results_overall_post <- data.frame(actual = GPU_input_data_post$gpu_avg, predicted = predicted_overall_post, dataset = "post", model = "overall")
results_pre_overall <- data.frame(actual = GPU_input_data_overall$gpu_avg, predicted = predicted_pre_overall, dataset = "overall", model = "pre")
results_pre_pre <- data.frame(actual = GPU_input_data_pre$gpu_avg, predicted = predicted_pre_pre, dataset = "pre", model = "pre")
results_pre_post <- data.frame(actual = GPU_input_data_post$gpu_avg, predicted = predicted_pre_post, dataset = "post", model = "pre")
results_post_overall <- data.frame(actual = GPU_input_data_overall$gpu_avg, predicted = predicted_post_overall, dataset = "overall", model = "post")
results_post_pre <- data.frame(actual = GPU_input_data_pre$gpu_avg, predicted = predicted_post_pre, dataset = "pre", model = "post")
results_post_post <- data.frame(actual = GPU_input_data_post$gpu_avg, predicted = predicted_post_post, dataset = "post", model = "post")
# Combine the results into a single data frame
results_df <- rbind(results_overall_overall, results_overall_pre, results_overall_post,
results_pre_overall, results_pre_pre, results_pre_post,
results_post_overall, results_post_pre, results_post_post)
# Plot the actual vs. predicted values for each model-dataset combination
ggplot(results_df, aes(x = actual, y = predicted, color = dataset)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, linetype = "dashed") +
facet_grid(rows = vars(model), cols = vars(dataset), switch = "both") +
labs(x = "Actual GPU Average Price", y = "Predicted GPU Average Price", color = "Dataset") +
ggtitle("Comparison of Linear Regression Models Trained on Different Time Periods") +
theme(plot.title = element_text(hjust = 0.5))
# Print the summary of each model
cat("\nSummary of Model Trained on GPU_input_data_overall:\n")
summary(glm_overall)
cat("\nSummary of Model Trained on GPU_input_data_pre:\n")
summary(glm_pre)
cat("\nSummary of Model Trained on GPU_input_data_post:\n")
summary(glm_post)
# Create a null model that predicts gpu_avg using the mean of the training data
mean_gpu_avg <- mean(GPU_input_data_overall$gpu_avg)
null_predicted_pre <- rep(mean_gpu_avg, nrow(GPU_input_data_pre))
null_predicted_post <- rep(mean_gpu_avg, nrow(GPU_input_data_post))
# Evaluate the performance of the models using mean squared error (MSE)
mse_pre <- mean((GPU_input_data_pre$gpu_avg - predicted_pre)^2)
mse_null_pre <- mean((GPU_input_data_pre$gpu_avg - null_predicted_pre)^2)
mse_post <- mean((GPU_input_data_post$gpu_avg - predicted_post)^2)
mse_null_post <- mean((GPU_input_data_post$gpu_avg - null_predicted_post)^2)
# Print the MSE values
cat("MSE for linear regression model on pre dataset:", mse_pre, "\n")
cat("MSE for null model on pre dataset:", mse_null_pre, "\n")
cat("MSE for linear regression model on post dataset:", mse_post, "\n")
cat("MSE for null model on post dataset:", mse_null_post, "\n")
# Fit a null model with only an intercept term to each dataset
null_model_overall <- glm(gpu_avg ~ 1, data = GPU_input_data_overall)
null_model_pre <- glm(gpu_avg ~ 1, data = GPU_input_data_pre)
null_model_post <- glm(gpu_avg ~ 1, data = GPU_input_data_post)
# Compute the AIC value for each null model
aic_null_overall <- AIC(null_model_overall)
aic_null_pre <- AIC(null_model_pre)
aic_null_post <- AIC(null_model_post)
# Print the AIC values
cat("AIC for null model on GPU_input_data_overall: ", aic_null_overall, "\n")
cat("AIC for null model on GPU_input_data_pre: ", aic_null_pre, "\n")
cat("AIC for null model on GPU_input_data_post: ", aic_null_post, "\n")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
# Load in the GPU_input_data_overall.csv file
GPU_input_data_overall <- read.csv("GPU_input_data_overall.csv")
# Load in the GPU_input_data_pre.csv file
GPU_input_data_pre <- read.csv("GPU_input_data_pre.csv")
# Load in the GPU_input_data_post.csv file
GPU_input_data_post <- read.csv("GPU_input_data_post.csv")
# Scale the difficulty and btc variables down by 1000
GPU_input_data_overall$difficulty <- GPU_input_data_overall$difficulty / 1000
GPU_input_data_overall$btc <- GPU_input_data_overall$btc / 1000
GPU_input_data_pre$difficulty <- GPU_input_data_pre$difficulty / 1000
GPU_input_data_pre$btc <- GPU_input_data_pre$btc / 1000
GPU_input_data_post$difficulty <- GPU_input_data_post$difficulty / 1000
GPU_input_data_post$btc <- GPU_input_data_post$btc / 1000
#create a variable that is the average of the three prices
# For GPU_input_data_overall
GPU_input_data_overall$gpu_avg <- rowMeans(GPU_input_data_overall[, c("gtx1080ti", "gtx1660ti", "rtx3070")])
# For GPU_input_data_pre
GPU_input_data_pre$gpu_avg <- rowMeans(GPU_input_data_pre[, c("gtx1080ti", "gtx1660ti", "rtx3070")])
# For GPU_input_data_post
GPU_input_data_post$gpu_avg <- rowMeans(GPU_input_data_post[, c("gtx1080ti", "gtx1660ti", "rtx3070")])
# Fit linear regression models to predict gpu_avg using bond, spy, nvda, difficulty, and btc for each dataset
glm_overall <- glm(gpu_avg ~ bond + spy + nvda + difficulty + btc, data = GPU_input_data_overall)
glm_pre <- glm(gpu_avg ~ bond + spy + nvda + difficulty + btc, data = GPU_input_data_pre)
glm_post <- glm(gpu_avg ~ bond + spy + nvda + difficulty + btc, data = GPU_input_data_post)
# Use each model to predict gpu_avg for all three datasets
predicted_overall_overall <- predict(glm_overall, newdata = GPU_input_data_overall)
predicted_overall_pre <- predict(glm_overall, newdata = GPU_input_data_pre)
predicted_overall_post <- predict(glm_overall, newdata = GPU_input_data_post)
predicted_pre_overall <- predict(glm_pre, newdata = GPU_input_data_overall)
predicted_pre_pre <- predict(glm_pre, newdata = GPU_input_data_pre)
predicted_pre_post <- predict(glm_pre, newdata = GPU_input_data_post)
predicted_post_overall <- predict(glm_post, newdata = GPU_input_data_overall)
predicted_post_pre <- predict(glm_post, newdata = GPU_input_data_pre)
predicted_post_post <- predict(glm_post, newdata = GPU_input_data_post)
# Create data frames to store the results
results_overall_overall <- data.frame(actual = GPU_input_data_overall$gpu_avg, predicted = predicted_overall_overall, dataset = "overall", model = "overall")
results_overall_pre <- data.frame(actual = GPU_input_data_pre$gpu_avg, predicted = predicted_overall_pre, dataset = "pre", model = "overall")
results_overall_post <- data.frame(actual = GPU_input_data_post$gpu_avg, predicted = predicted_overall_post, dataset = "post", model = "overall")
results_pre_overall <- data.frame(actual = GPU_input_data_overall$gpu_avg, predicted = predicted_pre_overall, dataset = "overall", model = "pre")
results_pre_pre <- data.frame(actual = GPU_input_data_pre$gpu_avg, predicted = predicted_pre_pre, dataset = "pre", model = "pre")
results_pre_post <- data.frame(actual = GPU_input_data_post$gpu_avg, predicted = predicted_pre_post, dataset = "post", model = "pre")
results_post_overall <- data.frame(actual = GPU_input_data_overall$gpu_avg, predicted = predicted_post_overall, dataset = "overall", model = "post")
results_post_pre <- data.frame(actual = GPU_input_data_pre$gpu_avg, predicted = predicted_post_pre, dataset = "pre", model = "post")
results_post_post <- data.frame(actual = GPU_input_data_post$gpu_avg, predicted = predicted_post_post, dataset = "post", model = "post")
# Combine the results into a single data frame
results_df <- rbind(results_overall_overall, results_overall_pre, results_overall_post,
results_pre_overall, results_pre_pre, results_pre_post,
results_post_overall, results_post_pre, results_post_post)
# Plot the actual vs. predicted values for each model-dataset combination
ggplot(results_df, aes(x = actual, y = predicted, color = dataset)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, linetype = "dashed") +
facet_grid(rows = vars(model), cols = vars(dataset), switch = "both") +
labs(x = "Actual GPU Average Price", y = "Predicted GPU Average Price", color = "Dataset") +
ggtitle("Comparison of Linear Regression Models Trained on Different Time Periods") +
theme(plot.title = element_text(hjust = 0.5))
# Print the summary of each model
cat("\nSummary of Model Trained on GPU_input_data_overall:\n")
summary(glm_overall)
cat("\nSummary of Model Trained on GPU_input_data_pre:\n")
summary(glm_pre)
cat("\nSummary of Model Trained on GPU_input_data_post:\n")
summary(glm_post)
# Fit a null model with only an intercept term to each dataset
null_model_overall <- glm(gpu_avg ~ 1, data = GPU_input_data_overall)
null_model_pre <- glm(gpu_avg ~ 1, data = GPU_input_data_pre)
null_model_post <- glm(gpu_avg ~ 1, data = GPU_input_data_post)
# Compute the AIC value for each null model
aic_null_overall <- AIC(null_model_overall)
aic_null_pre <- AIC(null_model_pre)
aic_null_post <- AIC(null_model_post)
# Print the AIC values
cat("AIC for null model on GPU_input_data_overall: ", aic_null_overall, "\n")
cat("AIC for null model on GPU_input_data_pre: ", aic_null_pre, "\n")
cat("AIC for null model on GPU_input_data_post: ", aic_null_post, "\n")
# Define a function to compute the percentage of predictions that were over or under the actual value
compute_percentage <- function(actual, predicted) {
diff <- predicted - actual
percent_over <- 100 * sum(diff > 0) / length(diff)
percent_under <- 100 * sum(diff < 0) / length(diff)
return(list(percent_over = percent_over, percent_under = percent_under))
}
# Compute the percentage of predictions that were over or under the actual value for each combination of models and datasets
percentages_overall_overall <- compute_percentage(results_overall_overall$actual, results_overall_overall$predicted)
percentages_overall_pre <- compute_percentage(results_overall_pre$actual, results_overall_pre$predicted)
percentages_overall_post <- compute_percentage(results_overall_post$actual, results_overall_post$predicted)
percentages_pre_overall <- compute_percentage(results_pre_overall$actual, results_pre_overall$predicted)
percentages_pre_pre <- compute_percentage(results_pre_pre$actual, results_pre_pre$predicted)
percentages_pre_post <- compute_percentage(results_pre_post$actual, results_pre_post$predicted)
percentages_post_overall <- compute_percentage(results_post_overall$actual, results_post_overall$predicted)
percentages_post_pre <- compute_percentage(results_post_pre$actual, results_post_pre$predicted)
percentages_post_post <- compute_percentage(results_post_post$actual, results_post_post$predicted)
# Print the results
cat("Percentage of predictions that were over the actual value:\n")
cat("  - Model trained on GPU_input_data_overall, tested on GPU_input_data_overall: ", percentages_overall_overall$percent_over, "%\n")
cat("  - Model trained on GPU_input_data_overall, tested on GPU_input_data_pre: ", percentages_overall_pre$percent_over, "%\n")
cat("  - Model trained on GPU_input_data_overall, tested on GPU_input_data_post: ", percentages_overall_post$percent_over, "%\n")
cat("  - Model trained on GPU_input_data_pre, tested on GPU_input_data_overall: ", percentages_pre_overall$percent_over, "%\n")
cat("  - Model trained on GPU_input_data_pre, tested on GPU_input_data_pre: ", percentages_pre_pre$percent_over, "%\n")
cat("  - Model trained on GPU_input_data_pre, tested on GPU_input_data_post: ", percentages_pre_post$percent_over, "%\n")
cat("  - Model trained on GPU_input_data_post, tested on GPU_input_data_overall: ", percentages_post_overall$percent_over, "%\n")
cat("  - Model trained on GPU_input_data_post, tested on GPU_input_data_pre: ", percentages_post_pre$percent_over, "%\n")
cat("  - Model trained on GPU_input_data_post, tested on GPU_input_data_post: ", percentages_post_post$percent_over, "%\n")
cat("\nPercentage of predictions that were under the actual value:\n")
cat("  - Model trained on GPU_input_data_overall, tested on GPU_input_data_overall: ", percentages_overall_overall$percent_under, "%\n")
cat("  - Model trained on GPU_input_data_overall, tested on GPU_input_data_pre: ", percentages_overall_pre$percent_under, "%\n")
cat("  - Model trained on GPU_input_data_overall, tested on GPU_input_data_post: ", percentages_overall_post$percent_under, "%\n")
cat("  - Model trained on GPU_input_data_pre, tested on GPU_input_data_overall: ", percentages_pre_overall$percent_under, "%\n")
cat("  - Model trained on GPU_input_data_pre, tested on GPU_input_data_pre: ", percentages_pre_pre$percent_under, "%\n")
cat("  - Model trained on GPU_input_data_pre, tested on GPU_input_data_post: ", percentages_pre_post$percent_under, "%\n")
cat("  - Model trained on GPU_input_data_post, tested on GPU_input_data_overall: ", percentages_post_overall$percent_under, "%\n")
cat("  - Model trained on GPU_input_data_post, tested on GPU_input_data_pre: ", percentages_post_pre$percent_under, "%\n")
cat("  - Model trained on GPU_input_data_post, tested on GPU_input_data_post: ", percentages_post_post$percent_under, "%\n")
